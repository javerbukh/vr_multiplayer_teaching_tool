using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class SphereModel
{
    [RealtimeProperty(1, true)]
    private Color _sphereColor;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class SphereModel : IModel {
    // Properties
    public UnityEngine.Color sphereColor {
        get { return _cache.LookForValueInCache(_sphereColor, entry => entry.sphereColorSet, entry => entry.sphereColor); }
        set { if (value == sphereColor) return; _cache.UpdateLocalCache(entry => { entry.sphereColorSet = true; entry.sphereColor = value; return entry; }); }
    }
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool              sphereColorSet;
        public UnityEngine.Color sphereColor;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public SphereModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Serialization
    enum PropertyID {
        SphereColor = 1,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _sphereColor = sphereColor;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteBytesLength((uint)PropertyID.SphereColor, WriteStream.ColorToBytesLength());
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.sphereColorSet)
                    length += WriteStream.WriteBytesLength((uint)PropertyID.SphereColor, WriteStream.ColorToBytesLength());
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteBytes((uint)PropertyID.SphereColor, WriteStream.ColorToBytes(_sphereColor));
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.sphereColorSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.sphereColorSet)
                    stream.WriteBytes((uint)PropertyID.SphereColor, WriteStream.ColorToBytes(entry.sphereColor));
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.SphereColor: {
                    _sphereColor = ReadStream.ColorFromBytes(stream.ReadBytes());
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
