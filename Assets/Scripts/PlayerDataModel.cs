using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class PlayerDataModel
{
    [RealtimeProperty(1, true, true)]
    private int _playerScore;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerDataModel : IModel {
    // Properties
    public int playerScore {
        get { return _cache.LookForValueInCache(_playerScore, entry => entry.playerScoreSet, entry => entry.playerScore); }
        set { if (value == playerScore) return; _cache.UpdateLocalCache(entry => { entry.playerScoreSet = true; entry.playerScore = value; return entry; }); FirePlayerScoreDidChange(value); }
    }
    
    // Events
    public delegate void PlayerScoreDidChange(PlayerDataModel model, int value);
    public event         PlayerScoreDidChange playerScoreDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool playerScoreSet;
        public int  playerScore;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public PlayerDataModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FirePlayerScoreDidChange(int value) {
        try {
            if (playerScoreDidChange != null)
                playerScoreDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        PlayerScore = 1,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _playerScore = playerScore;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteVarint32Length((uint)PropertyID.PlayerScore, (uint)_playerScore);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.playerScoreSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.PlayerScore, (uint)entry.playerScore);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteVarint32((uint)PropertyID.PlayerScore, (uint)_playerScore);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.playerScoreSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.playerScoreSet)
                    stream.WriteVarint32((uint)PropertyID.PlayerScore, (uint)entry.playerScore);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool playerScoreExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.playerScoreSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.PlayerScore: {
                    int previousValue = _playerScore;
                    
                    _playerScore = (int)stream.ReadVarint32();
                    
                    if (!playerScoreExistsInChangeCache && _playerScore != previousValue)
                        FirePlayerScoreDidChange(_playerScore);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
